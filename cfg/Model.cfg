/*******************************************************************************
* Copyright 2018 Intel Corporation
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*     http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*******************************************************************************/

#include <cv.h>
#include <highgui.h> 
#include "include/Sum.h"
#include "include/Concat.h"
#include "include/Convolution.h"
#include "include/Deconvolution.h"
#include "include/Pooling.h"
#include "include/InnerProduct.h"
#include "include/Softmax.h"
#include "include/Resize.h"
#include "include/Reorder.h"
#include "include/Scales.h"
#include "include/Split.h"
#include "include/BatchNorm.h"
#include "include/ExtractImagePatches.h"
#include "include/ResizeBilinear.h"

using namespace std;

class Model
{
public:
    Model(const char *_weights_path, int _batch_size, int _height=${height}, int _width=${width}, int _channel=${channel}) {
        this->weights_path = _weights_path;
        this->batch_size = _batch_size;
        this->input_height = _height;
        this->input_width = _width;
        this->input_channel = _channel;

        create_net();
        if ( !instance_num ) read_weights();
        init_net();

        instance_num ++;
    }
    ~Model() {
        release_io();
        if ( instance_num == 1 ) release_weights();
        instance_num --;
    }


    float* inference(float *input) {
        src_memory->set_data_handle(input);
        stream(stream::kind::eager).submit(net).wait();
        float* last_output = (float*)${last_out_name}->get_data_handle();

        return last_output;
    }


    void create_net() {
        memory::dims src_tz = {batch_size, input_channel, input_height, input_width};
        vector<float> placeholder(batch_size * input_height * input_width * input_channel);
        src_memory = new memory({{{src_tz}, memory::data_type::f32,
                          memory::format::nchw}, cpu_engine}, placeholder.data());
${create_net}    }


    void init_net() {
${init_net}    }


    void read_weights() {
        FILE *fp;
        fp = fopen(weights_path, "rb");
        if(fp==0){ printf("ERROR: Fail to open [%s]\n", weights_path); exit(0);}
${read_vars}
        fclose(fp);
    }


    void print_output() {
${init_outs}
        printf("---------------result---------------\n\n");
${create_outs}${make_int8_topo}    }


    void release_io() {
        if(src_memory == NULL) return;

        delete src_memory; src_memory = NULL;
${delete_outs}    }


    void release_weights() {
${delete_vars}    }


    float* make_fake_input() {
        fake_input = new float[batch_size * input_height * input_width * input_channel];
        float *input_p = fake_input;

        for( int b = 0; b < batch_size; b ++ )
            for( int c = 0; c < input_channel; c ++ )
                for( int h = 0; h < input_height; h ++ )
                    for( int w = 0; w < input_width; w ++ )
                        *(input_p++) = 1.0;

        return fake_input;
    }


private:
    // Define basis variates
    float *fake_input;
    static int instance_num;
    const char *weights_path;
    int batch_size, input_height, input_width, input_channel;

    memory* src_memory = NULL;
    std::vector<primitive> net;
    engine cpu_engine = engine(engine::cpu, 0);

    // Define variates of net
${define_net}
    // Define variates of outputs
${define_outs}
    // Define variates of weights
${define_vars}};

int Model::instance_num = 0;
// Create variates of weights
${create_vars}
